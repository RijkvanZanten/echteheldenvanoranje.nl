{"version":3,"sources":["webpack:///app.c496ddec09bc10b3421c.js","webpack:///./app/client/index.jsx","webpack:///./app/common/App.jsx","webpack:///./app/common/StyleProvider.jsx","webpack:///./app/common/configureStore.js","webpack:///./app/common/globalStyles.js","webpack:///./app/common/reducers/index.js","webpack:///./app/common/routes.jsx","webpack:///./~/localforage/dist/localforage.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_reactDom","_reactRouter","_reactRedux","_reduxPersist","_localforage","_localforage2","_routes","_routes2","_StyleProvider","_StyleProvider2","_configureStore","_configureStore2","store","persistStore","storage","render","createElement","userAgent","navigator","Provider","Router","routes","history","browserHistory","document","getElementById","212","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","App","_Component","this","getPrototypeOf","apply","arguments","children","Component","213","_class","_temp","_radium","_globalStyles","_globalStyles2","StyleProvider","StyleRoot","radiumConfig","Style","rules","displayName","214","process","configureStore","browser","enhancers","_redux","compose","autoRehydrate","window","devToolsExtension","f","createStore","_reducers2","undefined","_reducers","215","html","msTextSizeAdjust","webkitTextSizeAdjust","body","margin","article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary","display","audio, canvas, progress, video","verticalAlign","audio:not([controls])","height","[hidden], template","a","backgroundColor","a:active, a:hover","outline","abbr[title]","borderBottom","b, strong","fontWeight","dfn","fontStyle","h1","fontSize","mark","background","color","small","sub, sup","lineHeight","position","sup","top","sub","bottom","img","border","svg:not(:root)","overflow","figure","hr","boxSizing","pre","code, kbd, pre, samp","fontFamily","button, input, optgroup, select, textarea","font","button","button, select","textTransform","button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]","webkitAppearance","cursor","button[disabled], html input[disabled]","button::-moz-focus-inner, input::-moz-focus-inner","padding","input","input[type=\"checkbox\"], input[type=\"radio\"]","input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button","input[type=\"search\"]","input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration","fieldset","legend","textarea","optgroup","table","borderCollapse","borderSpacing","td, th","216","rootReducer","combineReducers","217","_App","_App2","Route","path","component","IndexRoute","277","define","amd","g","global","localforage","e","t","n","r","s","o","u","require","Error","code","l","1","_dereq_","INTERNAL","Promise","resolver","state","PENDING","queue","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","immediate","returnValue","handlers","reject","resolve","getThen","then","thenable","onError","called","onSuccess","tryToUnwrap","result","tryCatch","status","out","reason","all","iterable","allResolver","resolveFromAll","outValue","values","resolved","len","error","toString","Array","race","response","REJECTED","FULFILLED","push","2","nextTick","draining","oldQueue","task","scheduleDrain","Mutation","MutationObserver","WebKitMutationObserver","observer","element","createTextNode","observe","characterData","data","setImmediate","MessageChannel","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","3","4","getIDB","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","isIndexedDBValid","idb","openDatabase","test","open","IDBKeyRange","isWebSQLValid","isLocalStorageValid","localStorage","setItem","createBlob","parts","properties","Blob","name","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","type","executeCallback","callback","executeTwoCallbacks","errorCallback","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","txn","Promise$1","blob","objectStore","DETECT_BLOB_SUPPORT_STORE","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","match","matchedEdge","parseInt","_checkBlobSupport","supportsBlobs","_deferReadiness","dbInfo","dbContext","dbContexts","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_getConnection","upgradeNeeded","db","close","dbArgs","version","openreq","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","console","warn","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","arrayBuff","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_initStorage","options","ignoreErrors","forages","ready","initPromises","j","forage","slice","_defaultConfig","k","getItem","String","transaction","req","get","iterate","iterator","openCursor","iterationNumber","blobSupport","err","removeItem","clear","count","advanced","advance","keys","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","BASE_CHARS","indexOf","bufferToString","base64String","substring","serialize","valueType","toString$1","marker","SERIALIZED_MARKER","TYPE_ARRAYBUFFER","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_UINT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","fileReader","onload","str","BLOB_TYPE_PREFIX","TYPE_BLOB","readAsArrayBuffer","JSON","stringify","deserialize","SERIALIZED_MARKER_LENGTH","parse","blobType","TYPE_SERIALIZED_MARKER_LENGTH","BLOB_TYPE_PREFIX_REGEX","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","_initStorage$1","dbInfoPromise","description","size","executeSql","serializer","localforageSerializer","getItem$1","results","rows","item","iterate$1","setItem$1","originalValue","sqlError","QUOTA_ERR","removeItem$1","clear$1","length$1","c","key$1","keys$1","_initStorage$2","keyPrefix","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","length$2","removeItem$2","setItem$2","callWhenReady","localForageInstance","libraryMethod","_args","extend","arg","hasOwnProperty","isArray","isLibraryDriver","driverName","driver","DriverType","_typeof","Symbol","asyncStorage","_driver","webSQLStorage","localStorageWrapper","CustomDrivers","INDEXEDDB","LOCALSTORAGE","WEBSQL","DefaultDriverOrder","LibraryMethods","DefaultConfig","driverSupport","LocalForage","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","config","replace","defineDriver","driverObject","complianceError","namingError","customDriverMethods","concat","customDriverMethod","supportPromise","_support","supportResult","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","setDriverToConfig","initDriver","supportedDrivers","driverPromiseLoop","currentDriverIndex","_extend","_getSupportedDrivers","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","localforage_js"],"mappings":"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","file":"app.c496ddec09bc10b3421c.js","sourcesContent":["webpackJsonp([2,0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _react = __webpack_require__(4);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactDom = __webpack_require__(161);\n\t\n\tvar _reactRouter = __webpack_require__(88);\n\t\n\tvar _reactRedux = __webpack_require__(162);\n\t\n\tvar _reduxPersist = __webpack_require__(113);\n\t\n\tvar _localforage = __webpack_require__(277);\n\t\n\tvar _localforage2 = _interopRequireDefault(_localforage);\n\t\n\tvar _routes = __webpack_require__(217);\n\t\n\tvar _routes2 = _interopRequireDefault(_routes);\n\t\n\tvar _StyleProvider = __webpack_require__(213);\n\t\n\tvar _StyleProvider2 = _interopRequireDefault(_StyleProvider);\n\t\n\tvar _configureStore = __webpack_require__(214);\n\t\n\tvar _configureStore2 = _interopRequireDefault(_configureStore);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar store = (0, _configureStore2.default)();\n\t(0, _reduxPersist.persistStore)(store, { storage: _localforage2.default });\n\t\n\t(0, _reactDom.render)(_react2.default.createElement(\n\t  _StyleProvider2.default,\n\t  { userAgent: navigator.userAgent },\n\t  _react2.default.createElement(\n\t    _reactRedux.Provider,\n\t    { store: store },\n\t    _react2.default.createElement(_reactRouter.Router, { routes: _routes2.default, history: _reactRouter.browserHistory })\n\t  )\n\t), document.getElementById('app'));\n\n/***/ },\n\n/***/ 212:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(4);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar App = function (_Component) {\n\t  _inherits(App, _Component);\n\t\n\t  function App() {\n\t    _classCallCheck(this, App);\n\t\n\t    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(App, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      return _react2.default.createElement(\n\t        'div',\n\t        null,\n\t        _react2.default.createElement(\n\t          'h1',\n\t          null,\n\t          'Hoi'\n\t        ),\n\t        this.props.children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return App;\n\t}(_react.Component);\n\t\n\texports.default = App;\n\n/***/ },\n\n/***/ 213:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _class, _temp;\n\t\n\tvar _react = __webpack_require__(4);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _radium = __webpack_require__(157);\n\t\n\tvar _globalStyles = __webpack_require__(215);\n\t\n\tvar _globalStyles2 = _interopRequireDefault(_globalStyles);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar StyleProvider = (_temp = _class = function (_Component) {\n\t  _inherits(StyleProvider, _Component);\n\t\n\t  function StyleProvider() {\n\t    _classCallCheck(this, StyleProvider);\n\t\n\t    return _possibleConstructorReturn(this, (StyleProvider.__proto__ || Object.getPrototypeOf(StyleProvider)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(StyleProvider, [{\n\t    key: 'render',\n\t    value: function render() {\n\t      var children = this.props.children;\n\t\n\t      return _react2.default.createElement(\n\t        _radium.StyleRoot,\n\t        { radiumConfig: { userAgent: this.props.userAgent } },\n\t        _react2.default.createElement(_radium.Style, { rules: _globalStyles2.default }),\n\t        children\n\t      );\n\t    }\n\t  }]);\n\t\n\t  return StyleProvider;\n\t}(_react.Component), _class.displayName = 'EchteHeldenVanOranje', _temp);\n\texports.default = StyleProvider;\n\n/***/ },\n\n/***/ 214:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = configureStore;\n\t\n\tvar _redux = __webpack_require__(66);\n\t\n\tvar _reducers = __webpack_require__(216);\n\t\n\tvar _reducers2 = _interopRequireDefault(_reducers);\n\t\n\tvar _reduxPersist = __webpack_require__(113);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction configureStore() {\n\t  var store = void 0;\n\t\n\t  if (process.browser) {\n\t    var enhancers = (0, _redux.compose)((0, _reduxPersist.autoRehydrate)(), window.devToolsExtension ? window.devToolsExtension() : function (f) {\n\t      return f;\n\t    });\n\t\n\t    store = (0, _redux.createStore)(_reducers2.default, undefined, // due to redux-persist\n\t    enhancers);\n\t  } else {\n\t    store = (0, _redux.createStore)(_reducers2.default);\n\t  }\n\t\n\t  if (false) {\n\t    module.accept('./reducers/index', function () {\n\t      var nextReducer = require('./reducers/index');\n\t      store.replaceReducer(nextReducer);\n\t    });\n\t  }\n\t\n\t  return store;\n\t}\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)))\n\n/***/ },\n\n/***/ 215:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  'html': {\n\t    msTextSizeAdjust: '100%',\n\t    webkitTextSizeAdjust: '100%'\n\t  },\n\t  'body': {\n\t    margin: 0\n\t  },\n\t  'article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary': {\n\t    display: 'block'\n\t  },\n\t  'audio, canvas, progress, video': {\n\t    display: 'inline-block',\n\t    verticalAlign: 'baseline'\n\t  },\n\t  'audio:not([controls])': {\n\t    display: 'none',\n\t    height: 0\n\t  },\n\t  '[hidden], template': {\n\t    display: 'none'\n\t  },\n\t  'a': {\n\t    backgroundColor: 'transparent'\n\t  },\n\t  'a:active, a:hover': {\n\t    outline: 0\n\t  },\n\t  'abbr[title]': {\n\t    borderBottom: '1px dotted'\n\t  },\n\t  'b, strong': {\n\t    fontWeight: 'bold'\n\t  },\n\t  'dfn': {\n\t    fontStyle: 'italic'\n\t  },\n\t  'h1': {\n\t    fontSize: '2em',\n\t    margin: '0.67em 0'\n\t  },\n\t  'mark': {\n\t    background: '#ff0',\n\t    color: '#000'\n\t  },\n\t  'small': {\n\t    fontSize: '80%'\n\t  },\n\t  'sub, sup': {\n\t    fontSize: '75%',\n\t    lineHeight: 0,\n\t    position: 'relative',\n\t    verticalAlign: 'baseline'\n\t  },\n\t  'sup': {\n\t    top: '-0.5em'\n\t  },\n\t  'sub': {\n\t    bottom: '-0.25em'\n\t  },\n\t  'img': {\n\t    border: 0\n\t  },\n\t  'svg:not(:root)': {\n\t    overflow: 'hidden'\n\t  },\n\t  'figure': {\n\t    margin: '1em 40px'\n\t  },\n\t  'hr': {\n\t    boxSizing: 'content-box',\n\t    height: 0\n\t  },\n\t  'pre': {\n\t    overflow: 'auto'\n\t  },\n\t  'code, kbd, pre, samp': {\n\t    fontFamily: 'monospace, monospace',\n\t    fontSize: '1em'\n\t  },\n\t  'button, input, optgroup, select, textarea': {\n\t    color: 'inherit',\n\t    font: 'inherit',\n\t    margin: 0\n\t  },\n\t  'button': {\n\t    overflow: 'visible'\n\t  },\n\t  'button, select': {\n\t    textTransform: 'none'\n\t  },\n\t  'button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]': {\n\t    webkitAppearance: 'button',\n\t    cursor: 'pointer'\n\t  },\n\t  'button[disabled], html input[disabled]': {\n\t    cursor: 'default'\n\t  },\n\t  'button::-moz-focus-inner, input::-moz-focus-inner': {\n\t    border: 0,\n\t    padding: 0\n\t  },\n\t  'input': {\n\t    lineHeight: 'normal'\n\t  },\n\t  'input[type=\"checkbox\"], input[type=\"radio\"]': {\n\t    boxSizing: 'border-box',\n\t    padding: 0\n\t  },\n\t  'input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button': {\n\t    height: 'auto'\n\t  },\n\t  'input[type=\"search\"]': {\n\t    webkitAppearance: 'textfield',\n\t    boxSizing: 'content-box'\n\t  },\n\t  'input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration': {\n\t    webkitAppearance: 'none'\n\t  },\n\t  'fieldset': {\n\t    border: '1px solid #c0c0c0',\n\t    margin: '0 2px',\n\t    padding: '0.35em 0.625em 0.75em'\n\t  },\n\t  'legend': {\n\t    border: 0,\n\t    padding: 0\n\t  },\n\t  'textarea': {\n\t    overflow: 'auto'\n\t  },\n\t  'optgroup': {\n\t    fontWeight: 'bold'\n\t  },\n\t  'table': {\n\t    borderCollapse: 'collapse',\n\t    borderSpacing: 0\n\t  },\n\t  'td, th': {\n\t    padding: 0\n\t  }\n\t};\n\n/***/ },\n\n/***/ 216:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _redux = __webpack_require__(66);\n\t\n\tvar rootReducer = (0, _redux.combineReducers)({});\n\t\n\texports.default = rootReducer;\n\n/***/ },\n\n/***/ 217:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _react = __webpack_require__(4);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactRouter = __webpack_require__(88);\n\t\n\tvar _App = __webpack_require__(212);\n\t\n\tvar _App2 = _interopRequireDefault(_App);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar routes = _react2.default.createElement(\n\t  _reactRouter.Route,\n\t  { path: '/', component: _App2.default },\n\t  _react2.default.createElement(_reactRouter.IndexRoute, null)\n\t);\n\t\n\texports.default = routes;\n\n/***/ },\n\n/***/ 277:\n/***/ function(module, exports) {\n\n\t/*!\n\t    localForage -- Offline Storage, Improved\n\t    Version 1.4.3\n\t    https://mozilla.github.io/localForage\n\t    (c) 2013-2016 Mozilla, Apache License 2.0\n\t*/\n\t(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\t'use strict';\n\tvar immediate = _dereq_(2);\n\t\n\t/* istanbul ignore next */\n\tfunction INTERNAL() {}\n\t\n\tvar handlers = {};\n\t\n\tvar REJECTED = ['REJECTED'];\n\tvar FULFILLED = ['FULFILLED'];\n\tvar PENDING = ['PENDING'];\n\t\n\tmodule.exports = exports = Promise;\n\t\n\tfunction Promise(resolver) {\n\t  if (typeof resolver !== 'function') {\n\t    throw new TypeError('resolver must be a function');\n\t  }\n\t  this.state = PENDING;\n\t  this.queue = [];\n\t  this.outcome = void 0;\n\t  if (resolver !== INTERNAL) {\n\t    safelyResolveThenable(this, resolver);\n\t  }\n\t}\n\t\n\tPromise.prototype[\"catch\"] = function (onRejected) {\n\t  return this.then(null, onRejected);\n\t};\n\tPromise.prototype.then = function (onFulfilled, onRejected) {\n\t  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n\t    typeof onRejected !== 'function' && this.state === REJECTED) {\n\t    return this;\n\t  }\n\t  var promise = new this.constructor(INTERNAL);\n\t  if (this.state !== PENDING) {\n\t    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n\t    unwrap(promise, resolver, this.outcome);\n\t  } else {\n\t    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n\t  }\n\t\n\t  return promise;\n\t};\n\tfunction QueueItem(promise, onFulfilled, onRejected) {\n\t  this.promise = promise;\n\t  if (typeof onFulfilled === 'function') {\n\t    this.onFulfilled = onFulfilled;\n\t    this.callFulfilled = this.otherCallFulfilled;\n\t  }\n\t  if (typeof onRejected === 'function') {\n\t    this.onRejected = onRejected;\n\t    this.callRejected = this.otherCallRejected;\n\t  }\n\t}\n\tQueueItem.prototype.callFulfilled = function (value) {\n\t  handlers.resolve(this.promise, value);\n\t};\n\tQueueItem.prototype.otherCallFulfilled = function (value) {\n\t  unwrap(this.promise, this.onFulfilled, value);\n\t};\n\tQueueItem.prototype.callRejected = function (value) {\n\t  handlers.reject(this.promise, value);\n\t};\n\tQueueItem.prototype.otherCallRejected = function (value) {\n\t  unwrap(this.promise, this.onRejected, value);\n\t};\n\t\n\tfunction unwrap(promise, func, value) {\n\t  immediate(function () {\n\t    var returnValue;\n\t    try {\n\t      returnValue = func(value);\n\t    } catch (e) {\n\t      return handlers.reject(promise, e);\n\t    }\n\t    if (returnValue === promise) {\n\t      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n\t    } else {\n\t      handlers.resolve(promise, returnValue);\n\t    }\n\t  });\n\t}\n\t\n\thandlers.resolve = function (self, value) {\n\t  var result = tryCatch(getThen, value);\n\t  if (result.status === 'error') {\n\t    return handlers.reject(self, result.value);\n\t  }\n\t  var thenable = result.value;\n\t\n\t  if (thenable) {\n\t    safelyResolveThenable(self, thenable);\n\t  } else {\n\t    self.state = FULFILLED;\n\t    self.outcome = value;\n\t    var i = -1;\n\t    var len = self.queue.length;\n\t    while (++i < len) {\n\t      self.queue[i].callFulfilled(value);\n\t    }\n\t  }\n\t  return self;\n\t};\n\thandlers.reject = function (self, error) {\n\t  self.state = REJECTED;\n\t  self.outcome = error;\n\t  var i = -1;\n\t  var len = self.queue.length;\n\t  while (++i < len) {\n\t    self.queue[i].callRejected(error);\n\t  }\n\t  return self;\n\t};\n\t\n\tfunction getThen(obj) {\n\t  // Make sure we only access the accessor once as required by the spec\n\t  var then = obj && obj.then;\n\t  if (obj && typeof obj === 'object' && typeof then === 'function') {\n\t    return function appyThen() {\n\t      then.apply(obj, arguments);\n\t    };\n\t  }\n\t}\n\t\n\tfunction safelyResolveThenable(self, thenable) {\n\t  // Either fulfill, reject or reject with error\n\t  var called = false;\n\t  function onError(value) {\n\t    if (called) {\n\t      return;\n\t    }\n\t    called = true;\n\t    handlers.reject(self, value);\n\t  }\n\t\n\t  function onSuccess(value) {\n\t    if (called) {\n\t      return;\n\t    }\n\t    called = true;\n\t    handlers.resolve(self, value);\n\t  }\n\t\n\t  function tryToUnwrap() {\n\t    thenable(onSuccess, onError);\n\t  }\n\t\n\t  var result = tryCatch(tryToUnwrap);\n\t  if (result.status === 'error') {\n\t    onError(result.value);\n\t  }\n\t}\n\t\n\tfunction tryCatch(func, value) {\n\t  var out = {};\n\t  try {\n\t    out.value = func(value);\n\t    out.status = 'success';\n\t  } catch (e) {\n\t    out.status = 'error';\n\t    out.value = e;\n\t  }\n\t  return out;\n\t}\n\t\n\texports.resolve = resolve;\n\tfunction resolve(value) {\n\t  if (value instanceof this) {\n\t    return value;\n\t  }\n\t  return handlers.resolve(new this(INTERNAL), value);\n\t}\n\t\n\texports.reject = reject;\n\tfunction reject(reason) {\n\t  var promise = new this(INTERNAL);\n\t  return handlers.reject(promise, reason);\n\t}\n\t\n\texports.all = all;\n\tfunction all(iterable) {\n\t  var self = this;\n\t  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n\t    return this.reject(new TypeError('must be an array'));\n\t  }\n\t\n\t  var len = iterable.length;\n\t  var called = false;\n\t  if (!len) {\n\t    return this.resolve([]);\n\t  }\n\t\n\t  var values = new Array(len);\n\t  var resolved = 0;\n\t  var i = -1;\n\t  var promise = new this(INTERNAL);\n\t\n\t  while (++i < len) {\n\t    allResolver(iterable[i], i);\n\t  }\n\t  return promise;\n\t  function allResolver(value, i) {\n\t    self.resolve(value).then(resolveFromAll, function (error) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.reject(promise, error);\n\t      }\n\t    });\n\t    function resolveFromAll(outValue) {\n\t      values[i] = outValue;\n\t      if (++resolved === len && !called) {\n\t        called = true;\n\t        handlers.resolve(promise, values);\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\texports.race = race;\n\tfunction race(iterable) {\n\t  var self = this;\n\t  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n\t    return this.reject(new TypeError('must be an array'));\n\t  }\n\t\n\t  var len = iterable.length;\n\t  var called = false;\n\t  if (!len) {\n\t    return this.resolve([]);\n\t  }\n\t\n\t  var i = -1;\n\t  var promise = new this(INTERNAL);\n\t\n\t  while (++i < len) {\n\t    resolver(iterable[i]);\n\t  }\n\t  return promise;\n\t  function resolver(value) {\n\t    self.resolve(value).then(function (response) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.resolve(promise, response);\n\t      }\n\t    }, function (error) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.reject(promise, error);\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\t},{\"2\":2}],2:[function(_dereq_,module,exports){\n\t(function (global){\n\t'use strict';\n\tvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\t\n\tvar scheduleDrain;\n\t\n\t{\n\t  if (Mutation) {\n\t    var called = 0;\n\t    var observer = new Mutation(nextTick);\n\t    var element = global.document.createTextNode('');\n\t    observer.observe(element, {\n\t      characterData: true\n\t    });\n\t    scheduleDrain = function () {\n\t      element.data = (called = ++called % 2);\n\t    };\n\t  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n\t    var channel = new global.MessageChannel();\n\t    channel.port1.onmessage = nextTick;\n\t    scheduleDrain = function () {\n\t      channel.port2.postMessage(0);\n\t    };\n\t  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n\t    scheduleDrain = function () {\n\t\n\t      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t      var scriptEl = global.document.createElement('script');\n\t      scriptEl.onreadystatechange = function () {\n\t        nextTick();\n\t\n\t        scriptEl.onreadystatechange = null;\n\t        scriptEl.parentNode.removeChild(scriptEl);\n\t        scriptEl = null;\n\t      };\n\t      global.document.documentElement.appendChild(scriptEl);\n\t    };\n\t  } else {\n\t    scheduleDrain = function () {\n\t      setTimeout(nextTick, 0);\n\t    };\n\t  }\n\t}\n\t\n\tvar draining;\n\tvar queue = [];\n\t//named nextTick for less confusing stack traces\n\tfunction nextTick() {\n\t  draining = true;\n\t  var i, oldQueue;\n\t  var len = queue.length;\n\t  while (len) {\n\t    oldQueue = queue;\n\t    queue = [];\n\t    i = -1;\n\t    while (++i < len) {\n\t      oldQueue[i]();\n\t    }\n\t    len = queue.length;\n\t  }\n\t  draining = false;\n\t}\n\t\n\tmodule.exports = immediate;\n\tfunction immediate(task) {\n\t  if (queue.push(task) === 1 && !draining) {\n\t    scheduleDrain();\n\t  }\n\t}\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{}],3:[function(_dereq_,module,exports){\n\t(function (global){\n\t'use strict';\n\tif (typeof global.Promise !== 'function') {\n\t  global.Promise = _dereq_(1);\n\t}\n\t\n\t}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\t},{\"1\":1}],4:[function(_dereq_,module,exports){\n\t'use strict';\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction getIDB() {\n\t    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n\t    try {\n\t        if (typeof indexedDB !== 'undefined') {\n\t            return indexedDB;\n\t        }\n\t        if (typeof webkitIndexedDB !== 'undefined') {\n\t            return webkitIndexedDB;\n\t        }\n\t        if (typeof mozIndexedDB !== 'undefined') {\n\t            return mozIndexedDB;\n\t        }\n\t        if (typeof OIndexedDB !== 'undefined') {\n\t            return OIndexedDB;\n\t        }\n\t        if (typeof msIndexedDB !== 'undefined') {\n\t            return msIndexedDB;\n\t        }\n\t    } catch (e) {}\n\t}\n\t\n\tvar idb = getIDB();\n\t\n\tfunction isIndexedDBValid() {\n\t    try {\n\t        // Initialize IndexedDB; fall back to vendor-prefixed versions\n\t        // if needed.\n\t        if (!idb) {\n\t            return false;\n\t        }\n\t        // We mimic PouchDB here; just UA test for Safari (which, as of\n\t        // iOS 8/Yosemite, doesn't properly support IndexedDB).\n\t        // IndexedDB support is broken and different from Blink's.\n\t        // This is faster than the test case (and it's sync), so we just\n\t        // do this. *SIGH*\n\t        // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/\n\t        //\n\t        // We test for openDatabase because IE Mobile identifies itself\n\t        // as Safari. Oh the lulz...\n\t        if (typeof openDatabase !== 'undefined' && typeof navigator !== 'undefined' && navigator.userAgent && /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent)) {\n\t            return false;\n\t        }\n\t\n\t        return idb && typeof idb.open === 'function' &&\n\t        // Some Samsung/HTC Android 4.0-4.3 devices\n\t        // have older IndexedDB specs; if this isn't available\n\t        // their IndexedDB is too old for us to use.\n\t        // (Replaces the onupgradeneeded test.)\n\t        typeof IDBKeyRange !== 'undefined';\n\t    } catch (e) {\n\t        return false;\n\t    }\n\t}\n\t\n\tfunction isWebSQLValid() {\n\t    return typeof openDatabase === 'function';\n\t}\n\t\n\tfunction isLocalStorageValid() {\n\t    try {\n\t        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && localStorage.setItem;\n\t    } catch (e) {\n\t        return false;\n\t    }\n\t}\n\t\n\t// Abstracts constructing a Blob object, so it also works in older\n\t// browsers that don't support the native Blob constructor. (i.e.\n\t// old QtWebKit versions, at least).\n\t// Abstracts constructing a Blob object, so it also works in older\n\t// browsers that don't support the native Blob constructor. (i.e.\n\t// old QtWebKit versions, at least).\n\tfunction createBlob(parts, properties) {\n\t    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n\t    parts = parts || [];\n\t    properties = properties || {};\n\t    try {\n\t        return new Blob(parts, properties);\n\t    } catch (e) {\n\t        if (e.name !== 'TypeError') {\n\t            throw e;\n\t        }\n\t        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n\t        var builder = new Builder();\n\t        for (var i = 0; i < parts.length; i += 1) {\n\t            builder.append(parts[i]);\n\t        }\n\t        return builder.getBlob(properties.type);\n\t    }\n\t}\n\t\n\t// This is CommonJS because lie is an external dependency, so Rollup\n\t// can just ignore it.\n\tif (typeof Promise === 'undefined' && typeof _dereq_ !== 'undefined') {\n\t    _dereq_(3);\n\t}\n\tvar Promise$1 = Promise;\n\t\n\tfunction executeCallback(promise, callback) {\n\t    if (callback) {\n\t        promise.then(function (result) {\n\t            callback(null, result);\n\t        }, function (error) {\n\t            callback(error);\n\t        });\n\t    }\n\t}\n\t\n\tfunction executeTwoCallbacks(promise, callback, errorCallback) {\n\t    if (typeof callback === 'function') {\n\t        promise.then(callback);\n\t    }\n\t\n\t    if (typeof errorCallback === 'function') {\n\t        promise[\"catch\"](errorCallback);\n\t    }\n\t}\n\t\n\t// Some code originally from async_storage.js in\n\t// [Gaia](https://github.com/mozilla-b2g/gaia).\n\t\n\tvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\n\tvar supportsBlobs;\n\tvar dbContexts;\n\tvar toString = Object.prototype.toString;\n\t\n\t// Transform a binary string to an array buffer, because otherwise\n\t// weird stuff happens when you try to work with the binary string directly.\n\t// It is known.\n\t// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n\t// encode-decode-image-with-base64-breaks-image (2013-04-21)\n\tfunction _binStringToArrayBuffer(bin) {\n\t    var length = bin.length;\n\t    var buf = new ArrayBuffer(length);\n\t    var arr = new Uint8Array(buf);\n\t    for (var i = 0; i < length; i++) {\n\t        arr[i] = bin.charCodeAt(i);\n\t    }\n\t    return buf;\n\t}\n\t\n\t//\n\t// Blobs are not supported in all versions of IndexedDB, notably\n\t// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n\t//\n\t// Various other blob bugs exist in Chrome v37-42 (inclusive).\n\t// Detecting them is expensive and confusing to users, and Chrome 37-42\n\t// is at very low usage worldwide, so we do a hacky userAgent check instead.\n\t//\n\t// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n\t// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n\t// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n\t//\n\t// Code borrowed from PouchDB. See:\n\t// https://github.com/pouchdb/pouchdb/blob/9c25a23/src/adapters/idb/blobSupport.js\n\t//\n\tfunction _checkBlobSupportWithoutCaching(txn) {\n\t    return new Promise$1(function (resolve) {\n\t        var blob = createBlob(['']);\n\t        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\t\n\t        txn.onabort = function (e) {\n\t            // If the transaction aborts now its due to not being able to\n\t            // write to the database, likely due to the disk being full\n\t            e.preventDefault();\n\t            e.stopPropagation();\n\t            resolve(false);\n\t        };\n\t\n\t        txn.oncomplete = function () {\n\t            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n\t            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n\t            // MS Edge pretends to be Chrome 42:\n\t            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n\t            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n\t        };\n\t    })[\"catch\"](function () {\n\t        return false; // error, so assume unsupported\n\t    });\n\t}\n\t\n\tfunction _checkBlobSupport(idb) {\n\t    if (typeof supportsBlobs === 'boolean') {\n\t        return Promise$1.resolve(supportsBlobs);\n\t    }\n\t    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n\t        supportsBlobs = value;\n\t        return supportsBlobs;\n\t    });\n\t}\n\t\n\tfunction _deferReadiness(dbInfo) {\n\t    var dbContext = dbContexts[dbInfo.name];\n\t\n\t    // Create a deferred object representing the current database operation.\n\t    var deferredOperation = {};\n\t\n\t    deferredOperation.promise = new Promise$1(function (resolve) {\n\t        deferredOperation.resolve = resolve;\n\t    });\n\t\n\t    // Enqueue the deferred operation.\n\t    dbContext.deferredOperations.push(deferredOperation);\n\t\n\t    // Chain its promise to the database readiness.\n\t    if (!dbContext.dbReady) {\n\t        dbContext.dbReady = deferredOperation.promise;\n\t    } else {\n\t        dbContext.dbReady = dbContext.dbReady.then(function () {\n\t            return deferredOperation.promise;\n\t        });\n\t    }\n\t}\n\t\n\tfunction _advanceReadiness(dbInfo) {\n\t    var dbContext = dbContexts[dbInfo.name];\n\t\n\t    // Dequeue a deferred operation.\n\t    var deferredOperation = dbContext.deferredOperations.pop();\n\t\n\t    // Resolve its promise (which is part of the database readiness\n\t    // chain of promises).\n\t    if (deferredOperation) {\n\t        deferredOperation.resolve();\n\t    }\n\t}\n\t\n\tfunction _getConnection(dbInfo, upgradeNeeded) {\n\t    return new Promise$1(function (resolve, reject) {\n\t\n\t        if (dbInfo.db) {\n\t            if (upgradeNeeded) {\n\t                _deferReadiness(dbInfo);\n\t                dbInfo.db.close();\n\t            } else {\n\t                return resolve(dbInfo.db);\n\t            }\n\t        }\n\t\n\t        var dbArgs = [dbInfo.name];\n\t\n\t        if (upgradeNeeded) {\n\t            dbArgs.push(dbInfo.version);\n\t        }\n\t\n\t        var openreq = idb.open.apply(idb, dbArgs);\n\t\n\t        if (upgradeNeeded) {\n\t            openreq.onupgradeneeded = function (e) {\n\t                var db = openreq.result;\n\t                try {\n\t                    db.createObjectStore(dbInfo.storeName);\n\t                    if (e.oldVersion <= 1) {\n\t                        // Added when support for blob shims was added\n\t                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\t                    }\n\t                } catch (ex) {\n\t                    if (ex.name === 'ConstraintError') {\n\t                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n\t                    } else {\n\t                        throw ex;\n\t                    }\n\t                }\n\t            };\n\t        }\n\t\n\t        openreq.onerror = function () {\n\t            reject(openreq.error);\n\t        };\n\t\n\t        openreq.onsuccess = function () {\n\t            resolve(openreq.result);\n\t            _advanceReadiness(dbInfo);\n\t        };\n\t    });\n\t}\n\t\n\tfunction _getOriginalConnection(dbInfo) {\n\t    return _getConnection(dbInfo, false);\n\t}\n\t\n\tfunction _getUpgradedConnection(dbInfo) {\n\t    return _getConnection(dbInfo, true);\n\t}\n\t\n\tfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n\t    if (!dbInfo.db) {\n\t        return true;\n\t    }\n\t\n\t    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n\t    var isDowngrade = dbInfo.version < dbInfo.db.version;\n\t    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\t\n\t    if (isDowngrade) {\n\t        // If the version is not the default one\n\t        // then warn for impossible downgrade.\n\t        if (dbInfo.version !== defaultVersion) {\n\t            console.warn('The database \"' + dbInfo.name + '\"' + ' can\\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n\t        }\n\t        // Align the versions to prevent errors.\n\t        dbInfo.version = dbInfo.db.version;\n\t    }\n\t\n\t    if (isUpgrade || isNewStore) {\n\t        // If the store is new then increment the version (if needed).\n\t        // This will trigger an \"upgradeneeded\" event which is required\n\t        // for creating a store.\n\t        if (isNewStore) {\n\t            var incVersion = dbInfo.db.version + 1;\n\t            if (incVersion > dbInfo.version) {\n\t                dbInfo.version = incVersion;\n\t            }\n\t        }\n\t\n\t        return true;\n\t    }\n\t\n\t    return false;\n\t}\n\t\n\t// encode a blob for indexeddb engines that don't support blobs\n\tfunction _encodeBlob(blob) {\n\t    return new Promise$1(function (resolve, reject) {\n\t        var reader = new FileReader();\n\t        reader.onerror = reject;\n\t        reader.onloadend = function (e) {\n\t            var base64 = btoa(e.target.result || '');\n\t            resolve({\n\t                __local_forage_encoded_blob: true,\n\t                data: base64,\n\t                type: blob.type\n\t            });\n\t        };\n\t        reader.readAsBinaryString(blob);\n\t    });\n\t}\n\t\n\t// decode an encoded blob\n\tfunction _decodeBlob(encodedBlob) {\n\t    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n\t    return createBlob([arrayBuff], { type: encodedBlob.type });\n\t}\n\t\n\t// is this one of our fancy encoded blobs?\n\tfunction _isEncodedBlob(value) {\n\t    return value && value.__local_forage_encoded_blob;\n\t}\n\t\n\t// Specialize the default `ready()` function by making it dependent\n\t// on the current database operations. Thus, the driver will be actually\n\t// ready when it's been initialized (default) *and* there are no pending\n\t// operations on the database (initiated by some other instances).\n\tfunction _fullyReady(callback) {\n\t    var self = this;\n\t\n\t    var promise = self._initReady().then(function () {\n\t        var dbContext = dbContexts[self._dbInfo.name];\n\t\n\t        if (dbContext && dbContext.dbReady) {\n\t            return dbContext.dbReady;\n\t        }\n\t    });\n\t\n\t    executeTwoCallbacks(promise, callback, callback);\n\t    return promise;\n\t}\n\t\n\t// Open the IndexedDB database (automatically creates one if one didn't\n\t// previously exist), using any options set in the config.\n\tfunction _initStorage(options) {\n\t    var self = this;\n\t    var dbInfo = {\n\t        db: null\n\t    };\n\t\n\t    if (options) {\n\t        for (var i in options) {\n\t            dbInfo[i] = options[i];\n\t        }\n\t    }\n\t\n\t    // Initialize a singleton container for all running localForages.\n\t    if (!dbContexts) {\n\t        dbContexts = {};\n\t    }\n\t\n\t    // Get the current context of the database;\n\t    var dbContext = dbContexts[dbInfo.name];\n\t\n\t    // ...or create a new context.\n\t    if (!dbContext) {\n\t        dbContext = {\n\t            // Running localForages sharing a database.\n\t            forages: [],\n\t            // Shared database.\n\t            db: null,\n\t            // Database readiness (promise).\n\t            dbReady: null,\n\t            // Deferred operations on the database.\n\t            deferredOperations: []\n\t        };\n\t        // Register the new context in the global container.\n\t        dbContexts[dbInfo.name] = dbContext;\n\t    }\n\t\n\t    // Register itself as a running localForage in the current context.\n\t    dbContext.forages.push(self);\n\t\n\t    // Replace the default `ready()` function with the specialized one.\n\t    if (!self._initReady) {\n\t        self._initReady = self.ready;\n\t        self.ready = _fullyReady;\n\t    }\n\t\n\t    // Create an array of initialization states of the related localForages.\n\t    var initPromises = [];\n\t\n\t    function ignoreErrors() {\n\t        // Don't handle errors here,\n\t        // just makes sure related localForages aren't pending.\n\t        return Promise$1.resolve();\n\t    }\n\t\n\t    for (var j = 0; j < dbContext.forages.length; j++) {\n\t        var forage = dbContext.forages[j];\n\t        if (forage !== self) {\n\t            // Don't wait for itself...\n\t            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n\t        }\n\t    }\n\t\n\t    // Take a snapshot of the related localForages.\n\t    var forages = dbContext.forages.slice(0);\n\t\n\t    // Initialize the connection process only when\n\t    // all the related localForages aren't pending.\n\t    return Promise$1.all(initPromises).then(function () {\n\t        dbInfo.db = dbContext.db;\n\t        // Get the connection or open a new one without upgrade.\n\t        return _getOriginalConnection(dbInfo);\n\t    }).then(function (db) {\n\t        dbInfo.db = db;\n\t        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n\t            // Reopen the database for upgrading.\n\t            return _getUpgradedConnection(dbInfo);\n\t        }\n\t        return db;\n\t    }).then(function (db) {\n\t        dbInfo.db = dbContext.db = db;\n\t        self._dbInfo = dbInfo;\n\t        // Share the final connection amongst related localForages.\n\t        for (var k = 0; k < forages.length; k++) {\n\t            var forage = forages[k];\n\t            if (forage !== self) {\n\t                // Self is already up-to-date.\n\t                forage._dbInfo.db = dbInfo.db;\n\t                forage._dbInfo.version = dbInfo.version;\n\t            }\n\t        }\n\t    });\n\t}\n\t\n\tfunction getItem(key, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\t            var req = store.get(key);\n\t\n\t            req.onsuccess = function () {\n\t                var value = req.result;\n\t                if (value === undefined) {\n\t                    value = null;\n\t                }\n\t                if (_isEncodedBlob(value)) {\n\t                    value = _decodeBlob(value);\n\t                }\n\t                resolve(value);\n\t            };\n\t\n\t            req.onerror = function () {\n\t                reject(req.error);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Iterate over all items stored in database.\n\tfunction iterate(iterator, callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\t\n\t            var req = store.openCursor();\n\t            var iterationNumber = 1;\n\t\n\t            req.onsuccess = function () {\n\t                var cursor = req.result;\n\t\n\t                if (cursor) {\n\t                    var value = cursor.value;\n\t                    if (_isEncodedBlob(value)) {\n\t                        value = _decodeBlob(value);\n\t                    }\n\t                    var result = iterator(value, cursor.key, iterationNumber++);\n\t\n\t                    if (result !== void 0) {\n\t                        resolve(result);\n\t                    } else {\n\t                        cursor[\"continue\"]();\n\t                    }\n\t                } else {\n\t                    resolve();\n\t                }\n\t            };\n\t\n\t            req.onerror = function () {\n\t                reject(req.error);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t\n\t    return promise;\n\t}\n\t\n\tfunction setItem(key, value, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        var dbInfo;\n\t        self.ready().then(function () {\n\t            dbInfo = self._dbInfo;\n\t            if (toString.call(value) === '[object Blob]') {\n\t                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n\t                    if (blobSupport) {\n\t                        return value;\n\t                    }\n\t                    return _encodeBlob(value);\n\t                });\n\t            }\n\t            return value;\n\t        }).then(function (value) {\n\t            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n\t            var store = transaction.objectStore(dbInfo.storeName);\n\t\n\t            // The reason we don't _save_ null is because IE 10 does\n\t            // not support saving the `null` type in IndexedDB. How\n\t            // ironic, given the bug below!\n\t            // See: https://github.com/mozilla/localForage/issues/161\n\t            if (value === null) {\n\t                value = undefined;\n\t            }\n\t\n\t            transaction.oncomplete = function () {\n\t                // Cast to undefined so the value passed to\n\t                // callback/promise is the same as what one would get out\n\t                // of `getItem()` later. This leads to some weirdness\n\t                // (setItem('foo', undefined) will return `null`), but\n\t                // it's not my fault localStorage is our baseline and that\n\t                // it's weird.\n\t                if (value === undefined) {\n\t                    value = null;\n\t                }\n\t\n\t                resolve(value);\n\t            };\n\t            transaction.onabort = transaction.onerror = function () {\n\t                var err = req.error ? req.error : req.transaction.error;\n\t                reject(err);\n\t            };\n\t\n\t            var req = store.put(value, key);\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction removeItem(key, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n\t            var store = transaction.objectStore(dbInfo.storeName);\n\t\n\t            // We use a Grunt task to make this safe for IE and some\n\t            // versions of Android (including those used by Cordova).\n\t            // Normally IE won't like `.delete()` and will insist on\n\t            // using `['delete']()`, but we have a build step that\n\t            // fixes this for us now.\n\t            var req = store[\"delete\"](key);\n\t            transaction.oncomplete = function () {\n\t                resolve();\n\t            };\n\t\n\t            transaction.onerror = function () {\n\t                reject(req.error);\n\t            };\n\t\n\t            // The request will be also be aborted if we've exceeded our storage\n\t            // space.\n\t            transaction.onabort = function () {\n\t                var err = req.error ? req.error : req.transaction.error;\n\t                reject(err);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction clear(callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n\t            var store = transaction.objectStore(dbInfo.storeName);\n\t            var req = store.clear();\n\t\n\t            transaction.oncomplete = function () {\n\t                resolve();\n\t            };\n\t\n\t            transaction.onabort = transaction.onerror = function () {\n\t                var err = req.error ? req.error : req.transaction.error;\n\t                reject(err);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction length(callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\t            var req = store.count();\n\t\n\t            req.onsuccess = function () {\n\t                resolve(req.result);\n\t            };\n\t\n\t            req.onerror = function () {\n\t                reject(req.error);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction key(n, callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        if (n < 0) {\n\t            resolve(null);\n\t\n\t            return;\n\t        }\n\t\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\t\n\t            var advanced = false;\n\t            var req = store.openCursor();\n\t            req.onsuccess = function () {\n\t                var cursor = req.result;\n\t                if (!cursor) {\n\t                    // this means there weren't enough keys\n\t                    resolve(null);\n\t\n\t                    return;\n\t                }\n\t\n\t                if (n === 0) {\n\t                    // We have the first key, return it if that's what they\n\t                    // wanted.\n\t                    resolve(cursor.key);\n\t                } else {\n\t                    if (!advanced) {\n\t                        // Otherwise, ask the cursor to skip ahead n\n\t                        // records.\n\t                        advanced = true;\n\t                        cursor.advance(n);\n\t                    } else {\n\t                        // When we get here, we've got the nth key.\n\t                        resolve(cursor.key);\n\t                    }\n\t                }\n\t            };\n\t\n\t            req.onerror = function () {\n\t                reject(req.error);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction keys(callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\t\n\t            var req = store.openCursor();\n\t            var keys = [];\n\t\n\t            req.onsuccess = function () {\n\t                var cursor = req.result;\n\t\n\t                if (!cursor) {\n\t                    resolve(keys);\n\t                    return;\n\t                }\n\t\n\t                keys.push(cursor.key);\n\t                cursor[\"continue\"]();\n\t            };\n\t\n\t            req.onerror = function () {\n\t                reject(req.error);\n\t            };\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tvar asyncStorage = {\n\t    _driver: 'asyncStorage',\n\t    _initStorage: _initStorage,\n\t    iterate: iterate,\n\t    getItem: getItem,\n\t    setItem: setItem,\n\t    removeItem: removeItem,\n\t    clear: clear,\n\t    length: length,\n\t    key: key,\n\t    keys: keys\n\t};\n\t\n\t// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n\t// it to Base64, so this is how we store it to prevent very strange errors with less\n\t// verbose ways of binary <-> string data storage.\n\tvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\n\tvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\n\tvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\t\n\tvar SERIALIZED_MARKER = '__lfsc__:';\n\tvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\t\n\t// OMG the serializations!\n\tvar TYPE_ARRAYBUFFER = 'arbf';\n\tvar TYPE_BLOB = 'blob';\n\tvar TYPE_INT8ARRAY = 'si08';\n\tvar TYPE_UINT8ARRAY = 'ui08';\n\tvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\n\tvar TYPE_INT16ARRAY = 'si16';\n\tvar TYPE_INT32ARRAY = 'si32';\n\tvar TYPE_UINT16ARRAY = 'ur16';\n\tvar TYPE_UINT32ARRAY = 'ui32';\n\tvar TYPE_FLOAT32ARRAY = 'fl32';\n\tvar TYPE_FLOAT64ARRAY = 'fl64';\n\tvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\t\n\tvar toString$1 = Object.prototype.toString;\n\t\n\tfunction stringToBuffer(serializedString) {\n\t    // Fill the string into a ArrayBuffer.\n\t    var bufferLength = serializedString.length * 0.75;\n\t    var len = serializedString.length;\n\t    var i;\n\t    var p = 0;\n\t    var encoded1, encoded2, encoded3, encoded4;\n\t\n\t    if (serializedString[serializedString.length - 1] === '=') {\n\t        bufferLength--;\n\t        if (serializedString[serializedString.length - 2] === '=') {\n\t            bufferLength--;\n\t        }\n\t    }\n\t\n\t    var buffer = new ArrayBuffer(bufferLength);\n\t    var bytes = new Uint8Array(buffer);\n\t\n\t    for (i = 0; i < len; i += 4) {\n\t        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n\t        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n\t        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n\t        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\t\n\t        /*jslint bitwise: true */\n\t        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n\t        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n\t        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n\t    }\n\t    return buffer;\n\t}\n\t\n\t// Converts a buffer to a string to store, serialized, in the backend\n\t// storage library.\n\tfunction bufferToString(buffer) {\n\t    // base64-arraybuffer\n\t    var bytes = new Uint8Array(buffer);\n\t    var base64String = '';\n\t    var i;\n\t\n\t    for (i = 0; i < bytes.length; i += 3) {\n\t        /*jslint bitwise: true */\n\t        base64String += BASE_CHARS[bytes[i] >> 2];\n\t        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n\t        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n\t        base64String += BASE_CHARS[bytes[i + 2] & 63];\n\t    }\n\t\n\t    if (bytes.length % 3 === 2) {\n\t        base64String = base64String.substring(0, base64String.length - 1) + '=';\n\t    } else if (bytes.length % 3 === 1) {\n\t        base64String = base64String.substring(0, base64String.length - 2) + '==';\n\t    }\n\t\n\t    return base64String;\n\t}\n\t\n\t// Serialize a value, afterwards executing a callback (which usually\n\t// instructs the `setItem()` callback/promise to be executed). This is how\n\t// we store binary data with localStorage.\n\tfunction serialize(value, callback) {\n\t    var valueType = '';\n\t    if (value) {\n\t        valueType = toString$1.call(value);\n\t    }\n\t\n\t    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n\t    // checks fail when running the tests using casper.js...\n\t    //\n\t    // TODO: See why those tests fail and use a better solution.\n\t    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n\t        // Convert binary arrays to a string and prefix the string with\n\t        // a special marker.\n\t        var buffer;\n\t        var marker = SERIALIZED_MARKER;\n\t\n\t        if (value instanceof ArrayBuffer) {\n\t            buffer = value;\n\t            marker += TYPE_ARRAYBUFFER;\n\t        } else {\n\t            buffer = value.buffer;\n\t\n\t            if (valueType === '[object Int8Array]') {\n\t                marker += TYPE_INT8ARRAY;\n\t            } else if (valueType === '[object Uint8Array]') {\n\t                marker += TYPE_UINT8ARRAY;\n\t            } else if (valueType === '[object Uint8ClampedArray]') {\n\t                marker += TYPE_UINT8CLAMPEDARRAY;\n\t            } else if (valueType === '[object Int16Array]') {\n\t                marker += TYPE_INT16ARRAY;\n\t            } else if (valueType === '[object Uint16Array]') {\n\t                marker += TYPE_UINT16ARRAY;\n\t            } else if (valueType === '[object Int32Array]') {\n\t                marker += TYPE_INT32ARRAY;\n\t            } else if (valueType === '[object Uint32Array]') {\n\t                marker += TYPE_UINT32ARRAY;\n\t            } else if (valueType === '[object Float32Array]') {\n\t                marker += TYPE_FLOAT32ARRAY;\n\t            } else if (valueType === '[object Float64Array]') {\n\t                marker += TYPE_FLOAT64ARRAY;\n\t            } else {\n\t                callback(new Error('Failed to get type for BinaryArray'));\n\t            }\n\t        }\n\t\n\t        callback(marker + bufferToString(buffer));\n\t    } else if (valueType === '[object Blob]') {\n\t        // Conver the blob to a binaryArray and then to a string.\n\t        var fileReader = new FileReader();\n\t\n\t        fileReader.onload = function () {\n\t            // Backwards-compatible prefix for the blob type.\n\t            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\t\n\t            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n\t        };\n\t\n\t        fileReader.readAsArrayBuffer(value);\n\t    } else {\n\t        try {\n\t            callback(JSON.stringify(value));\n\t        } catch (e) {\n\t            console.error(\"Couldn't convert value into a JSON string: \", value);\n\t\n\t            callback(null, e);\n\t        }\n\t    }\n\t}\n\t\n\t// Deserialize data we've inserted into a value column/field. We place\n\t// special markers into our strings to mark them as encoded; this isn't\n\t// as nice as a meta field, but it's the only sane thing we can do whilst\n\t// keeping localStorage support intact.\n\t//\n\t// Oftentimes this will just deserialize JSON content, but if we have a\n\t// special marker (SERIALIZED_MARKER, defined above), we will extract\n\t// some kind of arraybuffer/binary data/typed array out of the string.\n\tfunction deserialize(value) {\n\t    // If we haven't marked this string as being specially serialized (i.e.\n\t    // something other than serialized JSON), we can just return it and be\n\t    // done with it.\n\t    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n\t        return JSON.parse(value);\n\t    }\n\t\n\t    // The following code deals with deserializing some kind of Blob or\n\t    // TypedArray. First we separate out the type of data we're dealing\n\t    // with from the data itself.\n\t    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n\t    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\t\n\t    var blobType;\n\t    // Backwards-compatible blob type serialization strategy.\n\t    // DBs created with older versions of localForage will simply not have the blob type.\n\t    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n\t        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n\t        blobType = matcher[1];\n\t        serializedString = serializedString.substring(matcher[0].length);\n\t    }\n\t    var buffer = stringToBuffer(serializedString);\n\t\n\t    // Return the right type based on the code/type set during\n\t    // serialization.\n\t    switch (type) {\n\t        case TYPE_ARRAYBUFFER:\n\t            return buffer;\n\t        case TYPE_BLOB:\n\t            return createBlob([buffer], { type: blobType });\n\t        case TYPE_INT8ARRAY:\n\t            return new Int8Array(buffer);\n\t        case TYPE_UINT8ARRAY:\n\t            return new Uint8Array(buffer);\n\t        case TYPE_UINT8CLAMPEDARRAY:\n\t            return new Uint8ClampedArray(buffer);\n\t        case TYPE_INT16ARRAY:\n\t            return new Int16Array(buffer);\n\t        case TYPE_UINT16ARRAY:\n\t            return new Uint16Array(buffer);\n\t        case TYPE_INT32ARRAY:\n\t            return new Int32Array(buffer);\n\t        case TYPE_UINT32ARRAY:\n\t            return new Uint32Array(buffer);\n\t        case TYPE_FLOAT32ARRAY:\n\t            return new Float32Array(buffer);\n\t        case TYPE_FLOAT64ARRAY:\n\t            return new Float64Array(buffer);\n\t        default:\n\t            throw new Error('Unkown type: ' + type);\n\t    }\n\t}\n\t\n\tvar localforageSerializer = {\n\t    serialize: serialize,\n\t    deserialize: deserialize,\n\t    stringToBuffer: stringToBuffer,\n\t    bufferToString: bufferToString\n\t};\n\t\n\t/*\n\t * Includes code from:\n\t *\n\t * base64-arraybuffer\n\t * https://github.com/niklasvh/base64-arraybuffer\n\t *\n\t * Copyright (c) 2012 Niklas von Hertzen\n\t * Licensed under the MIT license.\n\t */\n\t// Open the WebSQL database (automatically creates one if one didn't\n\t// previously exist), using any options set in the config.\n\tfunction _initStorage$1(options) {\n\t    var self = this;\n\t    var dbInfo = {\n\t        db: null\n\t    };\n\t\n\t    if (options) {\n\t        for (var i in options) {\n\t            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n\t        }\n\t    }\n\t\n\t    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n\t        // Open the database; the openDatabase API will automatically\n\t        // create it for us if it doesn't exist.\n\t        try {\n\t            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n\t        } catch (e) {\n\t            return reject(e);\n\t        }\n\t\n\t        // Create our key/value table if it doesn't exist.\n\t        dbInfo.db.transaction(function (t) {\n\t            t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n\t                self._dbInfo = dbInfo;\n\t                resolve();\n\t            }, function (t, error) {\n\t                reject(error);\n\t            });\n\t        });\n\t    });\n\t\n\t    dbInfo.serializer = localforageSerializer;\n\t    return dbInfoPromise;\n\t}\n\t\n\tfunction getItem$1(key, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n\t                    var result = results.rows.length ? results.rows.item(0).value : null;\n\t\n\t                    // Check to see if this is serialized content we need to\n\t                    // unpack.\n\t                    if (result) {\n\t                        result = dbInfo.serializer.deserialize(result);\n\t                    }\n\t\n\t                    resolve(result);\n\t                }, function (t, error) {\n\t\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction iterate$1(iterator, callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t\n\t            dbInfo.db.transaction(function (t) {\n\t                t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n\t                    var rows = results.rows;\n\t                    var length = rows.length;\n\t\n\t                    for (var i = 0; i < length; i++) {\n\t                        var item = rows.item(i);\n\t                        var result = item.value;\n\t\n\t                        // Check to see if this is serialized content\n\t                        // we need to unpack.\n\t                        if (result) {\n\t                            result = dbInfo.serializer.deserialize(result);\n\t                        }\n\t\n\t                        result = iterator(result, item.key, i + 1);\n\t\n\t                        // void(0) prevents problems with redefinition\n\t                        // of `undefined`.\n\t                        if (result !== void 0) {\n\t                            resolve(result);\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    resolve();\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction setItem$1(key, value, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            // The localStorage API doesn't return undefined values in an\n\t            // \"expected\" way, so undefined is always cast to null in all\n\t            // drivers. See: https://github.com/mozilla/localForage/pull/42\n\t            if (value === undefined) {\n\t                value = null;\n\t            }\n\t\n\t            // Save the original value to pass to the callback.\n\t            var originalValue = value;\n\t\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.serializer.serialize(value, function (value, error) {\n\t                if (error) {\n\t                    reject(error);\n\t                } else {\n\t                    dbInfo.db.transaction(function (t) {\n\t                        t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {\n\t                            resolve(originalValue);\n\t                        }, function (t, error) {\n\t                            reject(error);\n\t                        });\n\t                    }, function (sqlError) {\n\t                        // The transaction failed; check\n\t                        // to see if it's a quota error.\n\t                        if (sqlError.code === sqlError.QUOTA_ERR) {\n\t                            // We reject the callback outright for now, but\n\t                            // it's worth trying to re-run the transaction.\n\t                            // Even if the user accepts the prompt to use\n\t                            // more storage on Safari, this error will\n\t                            // be called.\n\t                            //\n\t                            // TODO: Try to re-run the transaction.\n\t                            reject(sqlError);\n\t                        }\n\t                    });\n\t                }\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction removeItem$1(key, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n\t                    resolve();\n\t                }, function (t, error) {\n\t\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Deletes every item in the table.\n\t// TODO: Find out if this resets the AUTO_INCREMENT number.\n\tfunction clear$1(callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {\n\t                    resolve();\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Does a simple `COUNT(key)` to get the number of items stored in\n\t// localForage.\n\tfunction length$1(callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                // Ahhh, SQL makes this one soooooo easy.\n\t                t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n\t                    var result = results.rows.item(0).c;\n\t\n\t                    resolve(result);\n\t                }, function (t, error) {\n\t\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Return the key located at key index X; essentially gets the key from a\n\t// `WHERE id = ?`. This is the most efficient way I can think to implement\n\t// this rarely-used (in my experience) part of the API, but it can seem\n\t// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n\t// the ID of each key will change every time it's updated. Perhaps a stored\n\t// procedure for the `setItem()` SQL would solve this problem?\n\t// TODO: Don't change ID on `setItem()`.\n\tfunction key$1(n, callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n\t                    var result = results.rows.length ? results.rows.item(0).key : null;\n\t                    resolve(result);\n\t                }, function (t, error) {\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction keys$1(callback) {\n\t    var self = this;\n\t\n\t    var promise = new Promise$1(function (resolve, reject) {\n\t        self.ready().then(function () {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.db.transaction(function (t) {\n\t                t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n\t                    var keys = [];\n\t\n\t                    for (var i = 0; i < results.rows.length; i++) {\n\t                        keys.push(results.rows.item(i).key);\n\t                    }\n\t\n\t                    resolve(keys);\n\t                }, function (t, error) {\n\t\n\t                    reject(error);\n\t                });\n\t            });\n\t        })[\"catch\"](reject);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tvar webSQLStorage = {\n\t    _driver: 'webSQLStorage',\n\t    _initStorage: _initStorage$1,\n\t    iterate: iterate$1,\n\t    getItem: getItem$1,\n\t    setItem: setItem$1,\n\t    removeItem: removeItem$1,\n\t    clear: clear$1,\n\t    length: length$1,\n\t    key: key$1,\n\t    keys: keys$1\n\t};\n\t\n\t// Config the localStorage backend, using options set in the config.\n\tfunction _initStorage$2(options) {\n\t    var self = this;\n\t    var dbInfo = {};\n\t    if (options) {\n\t        for (var i in options) {\n\t            dbInfo[i] = options[i];\n\t        }\n\t    }\n\t\n\t    dbInfo.keyPrefix = dbInfo.name + '/';\n\t\n\t    if (dbInfo.storeName !== self._defaultConfig.storeName) {\n\t        dbInfo.keyPrefix += dbInfo.storeName + '/';\n\t    }\n\t\n\t    self._dbInfo = dbInfo;\n\t    dbInfo.serializer = localforageSerializer;\n\t\n\t    return Promise$1.resolve();\n\t}\n\t\n\t// Remove all keys from the datastore, effectively destroying all data in\n\t// the app's key/value store!\n\tfunction clear$2(callback) {\n\t    var self = this;\n\t    var promise = self.ready().then(function () {\n\t        var keyPrefix = self._dbInfo.keyPrefix;\n\t\n\t        for (var i = localStorage.length - 1; i >= 0; i--) {\n\t            var key = localStorage.key(i);\n\t\n\t            if (key.indexOf(keyPrefix) === 0) {\n\t                localStorage.removeItem(key);\n\t            }\n\t        }\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Retrieve an item from the store. Unlike the original async_storage\n\t// library in Gaia, we don't modify return values at all. If a key's value\n\t// is `undefined`, we pass that value to the callback function.\n\tfunction getItem$2(key, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\t\n\t        // If a result was found, parse it from the serialized\n\t        // string into a JS object. If result isn't truthy, the key\n\t        // is likely undefined and we'll pass it straight to the\n\t        // callback.\n\t        if (result) {\n\t            result = dbInfo.serializer.deserialize(result);\n\t        }\n\t\n\t        return result;\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Iterate over all items in the store.\n\tfunction iterate$2(iterator, callback) {\n\t    var self = this;\n\t\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var keyPrefix = dbInfo.keyPrefix;\n\t        var keyPrefixLength = keyPrefix.length;\n\t        var length = localStorage.length;\n\t\n\t        // We use a dedicated iterator instead of the `i` variable below\n\t        // so other keys we fetch in localStorage aren't counted in\n\t        // the `iterationNumber` argument passed to the `iterate()`\n\t        // callback.\n\t        //\n\t        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n\t        var iterationNumber = 1;\n\t\n\t        for (var i = 0; i < length; i++) {\n\t            var key = localStorage.key(i);\n\t            if (key.indexOf(keyPrefix) !== 0) {\n\t                continue;\n\t            }\n\t            var value = localStorage.getItem(key);\n\t\n\t            // If a result was found, parse it from the serialized\n\t            // string into a JS object. If result isn't truthy, the\n\t            // key is likely undefined and we'll pass it straight\n\t            // to the iterator.\n\t            if (value) {\n\t                value = dbInfo.serializer.deserialize(value);\n\t            }\n\t\n\t            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\t\n\t            if (value !== void 0) {\n\t                return value;\n\t            }\n\t        }\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Same as localStorage's key() method, except takes a callback.\n\tfunction key$2(n, callback) {\n\t    var self = this;\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var result;\n\t        try {\n\t            result = localStorage.key(n);\n\t        } catch (error) {\n\t            result = null;\n\t        }\n\t\n\t        // Remove the prefix from the key, if a key is found.\n\t        if (result) {\n\t            result = result.substring(dbInfo.keyPrefix.length);\n\t        }\n\t\n\t        return result;\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tfunction keys$2(callback) {\n\t    var self = this;\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        var length = localStorage.length;\n\t        var keys = [];\n\t\n\t        for (var i = 0; i < length; i++) {\n\t            if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {\n\t                keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));\n\t            }\n\t        }\n\t\n\t        return keys;\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Supply the number of keys in the datastore to the callback function.\n\tfunction length$2(callback) {\n\t    var self = this;\n\t    var promise = self.keys().then(function (keys) {\n\t        return keys.length;\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Remove an item from the store, nice and simple.\n\tfunction removeItem$2(key, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = self.ready().then(function () {\n\t        var dbInfo = self._dbInfo;\n\t        localStorage.removeItem(dbInfo.keyPrefix + key);\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\t// Set a key's value and run an optional callback once the value is set.\n\t// Unlike Gaia's implementation, the callback function is passed the value,\n\t// in case you want to operate on that value only after you're sure it\n\t// saved, or something like that.\n\tfunction setItem$2(key, value, callback) {\n\t    var self = this;\n\t\n\t    // Cast the key to a string, as that's all we can set as a key.\n\t    if (typeof key !== 'string') {\n\t        console.warn(key + ' used as a key, but it is not a string.');\n\t        key = String(key);\n\t    }\n\t\n\t    var promise = self.ready().then(function () {\n\t        // Convert undefined values to null.\n\t        // https://github.com/mozilla/localForage/pull/42\n\t        if (value === undefined) {\n\t            value = null;\n\t        }\n\t\n\t        // Save the original value to pass to the callback.\n\t        var originalValue = value;\n\t\n\t        return new Promise$1(function (resolve, reject) {\n\t            var dbInfo = self._dbInfo;\n\t            dbInfo.serializer.serialize(value, function (value, error) {\n\t                if (error) {\n\t                    reject(error);\n\t                } else {\n\t                    try {\n\t                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n\t                        resolve(originalValue);\n\t                    } catch (e) {\n\t                        // localStorage capacity exceeded.\n\t                        // TODO: Make this a specific error/event.\n\t                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n\t                            reject(e);\n\t                        }\n\t                        reject(e);\n\t                    }\n\t                }\n\t            });\n\t        });\n\t    });\n\t\n\t    executeCallback(promise, callback);\n\t    return promise;\n\t}\n\t\n\tvar localStorageWrapper = {\n\t    _driver: 'localStorageWrapper',\n\t    _initStorage: _initStorage$2,\n\t    // Default API, from Gaia/localStorage.\n\t    iterate: iterate$2,\n\t    getItem: getItem$2,\n\t    setItem: setItem$2,\n\t    removeItem: removeItem$2,\n\t    clear: clear$2,\n\t    length: length$2,\n\t    key: key$2,\n\t    keys: keys$2\n\t};\n\t\n\t// Custom drivers are stored here when `defineDriver()` is called.\n\t// They are shared across all instances of localForage.\n\tvar CustomDrivers = {};\n\t\n\tvar DriverType = {\n\t    INDEXEDDB: 'asyncStorage',\n\t    LOCALSTORAGE: 'localStorageWrapper',\n\t    WEBSQL: 'webSQLStorage'\n\t};\n\t\n\tvar DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];\n\t\n\tvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\t\n\tvar DefaultConfig = {\n\t    description: '',\n\t    driver: DefaultDriverOrder.slice(),\n\t    name: 'localforage',\n\t    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n\t    // we can use without a prompt.\n\t    size: 4980736,\n\t    storeName: 'keyvaluepairs',\n\t    version: 1.0\n\t};\n\t\n\tvar driverSupport = {};\n\t// Check to see if IndexedDB is available and if it is the latest\n\t// implementation; it's our preferred backend library. We use \"_spec_test\"\n\t// as the name of the database because it's not the one we'll operate on,\n\t// but it's useful to make sure its using the right spec.\n\t// See: https://github.com/mozilla/localForage/issues/128\n\tdriverSupport[DriverType.INDEXEDDB] = isIndexedDBValid();\n\t\n\tdriverSupport[DriverType.WEBSQL] = isWebSQLValid();\n\t\n\tdriverSupport[DriverType.LOCALSTORAGE] = isLocalStorageValid();\n\t\n\tvar isArray = Array.isArray || function (arg) {\n\t    return Object.prototype.toString.call(arg) === '[object Array]';\n\t};\n\t\n\tfunction callWhenReady(localForageInstance, libraryMethod) {\n\t    localForageInstance[libraryMethod] = function () {\n\t        var _args = arguments;\n\t        return localForageInstance.ready().then(function () {\n\t            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n\t        });\n\t    };\n\t}\n\t\n\tfunction extend() {\n\t    for (var i = 1; i < arguments.length; i++) {\n\t        var arg = arguments[i];\n\t\n\t        if (arg) {\n\t            for (var key in arg) {\n\t                if (arg.hasOwnProperty(key)) {\n\t                    if (isArray(arg[key])) {\n\t                        arguments[0][key] = arg[key].slice();\n\t                    } else {\n\t                        arguments[0][key] = arg[key];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    return arguments[0];\n\t}\n\t\n\tfunction isLibraryDriver(driverName) {\n\t    for (var driver in DriverType) {\n\t        if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {\n\t            return true;\n\t        }\n\t    }\n\t\n\t    return false;\n\t}\n\t\n\tvar LocalForage = function () {\n\t    function LocalForage(options) {\n\t        _classCallCheck(this, LocalForage);\n\t\n\t        this.INDEXEDDB = DriverType.INDEXEDDB;\n\t        this.LOCALSTORAGE = DriverType.LOCALSTORAGE;\n\t        this.WEBSQL = DriverType.WEBSQL;\n\t\n\t        this._defaultConfig = extend({}, DefaultConfig);\n\t        this._config = extend({}, this._defaultConfig, options);\n\t        this._driverSet = null;\n\t        this._initDriver = null;\n\t        this._ready = false;\n\t        this._dbInfo = null;\n\t\n\t        this._wrapLibraryMethodsWithReady();\n\t        this.setDriver(this._config.driver);\n\t    }\n\t\n\t    // Set any config values for localForage; can be called anytime before\n\t    // the first API call (e.g. `getItem`, `setItem`).\n\t    // We loop through options so we don't overwrite existing config\n\t    // values.\n\t\n\t\n\t    LocalForage.prototype.config = function config(options) {\n\t        // If the options argument is an object, we use it to set values.\n\t        // Otherwise, we return either a specified config value or all\n\t        // config values.\n\t        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n\t            // If localforage is ready and fully initialized, we can't set\n\t            // any new configuration values. Instead, we return an error.\n\t            if (this._ready) {\n\t                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n\t            }\n\t\n\t            for (var i in options) {\n\t                if (i === 'storeName') {\n\t                    options[i] = options[i].replace(/\\W/g, '_');\n\t                }\n\t\n\t                this._config[i] = options[i];\n\t            }\n\t\n\t            // after all config options are set and\n\t            // the driver option is used, try setting it\n\t            if ('driver' in options && options.driver) {\n\t                this.setDriver(this._config.driver);\n\t            }\n\t\n\t            return true;\n\t        } else if (typeof options === 'string') {\n\t            return this._config[options];\n\t        } else {\n\t            return this._config;\n\t        }\n\t    };\n\t\n\t    // Used to define a custom driver, shared across all instances of\n\t    // localForage.\n\t\n\t\n\t    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n\t        var promise = new Promise$1(function (resolve, reject) {\n\t            try {\n\t                var driverName = driverObject._driver;\n\t                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\t                var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);\n\t\n\t                // A driver name should be defined and not overlap with the\n\t                // library-defined, default drivers.\n\t                if (!driverObject._driver) {\n\t                    reject(complianceError);\n\t                    return;\n\t                }\n\t                if (isLibraryDriver(driverObject._driver)) {\n\t                    reject(namingError);\n\t                    return;\n\t                }\n\t\n\t                var customDriverMethods = LibraryMethods.concat('_initStorage');\n\t                for (var i = 0; i < customDriverMethods.length; i++) {\n\t                    var customDriverMethod = customDriverMethods[i];\n\t                    if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {\n\t                        reject(complianceError);\n\t                        return;\n\t                    }\n\t                }\n\t\n\t                var supportPromise = Promise$1.resolve(true);\n\t                if ('_support' in driverObject) {\n\t                    if (driverObject._support && typeof driverObject._support === 'function') {\n\t                        supportPromise = driverObject._support();\n\t                    } else {\n\t                        supportPromise = Promise$1.resolve(!!driverObject._support);\n\t                    }\n\t                }\n\t\n\t                supportPromise.then(function (supportResult) {\n\t                    driverSupport[driverName] = supportResult;\n\t                    CustomDrivers[driverName] = driverObject;\n\t                    resolve();\n\t                }, reject);\n\t            } catch (e) {\n\t                reject(e);\n\t            }\n\t        });\n\t\n\t        executeTwoCallbacks(promise, callback, errorCallback);\n\t        return promise;\n\t    };\n\t\n\t    LocalForage.prototype.driver = function driver() {\n\t        return this._driver || null;\n\t    };\n\t\n\t    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n\t        var self = this;\n\t        var getDriverPromise = Promise$1.resolve().then(function () {\n\t            if (isLibraryDriver(driverName)) {\n\t                switch (driverName) {\n\t                    case self.INDEXEDDB:\n\t                        return asyncStorage;\n\t                    case self.LOCALSTORAGE:\n\t                        return localStorageWrapper;\n\t                    case self.WEBSQL:\n\t                        return webSQLStorage;\n\t                }\n\t            } else if (CustomDrivers[driverName]) {\n\t                return CustomDrivers[driverName];\n\t            } else {\n\t                throw new Error('Driver not found.');\n\t            }\n\t        });\n\t        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n\t        return getDriverPromise;\n\t    };\n\t\n\t    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n\t        var serializerPromise = Promise$1.resolve(localforageSerializer);\n\t        executeTwoCallbacks(serializerPromise, callback);\n\t        return serializerPromise;\n\t    };\n\t\n\t    LocalForage.prototype.ready = function ready(callback) {\n\t        var self = this;\n\t\n\t        var promise = self._driverSet.then(function () {\n\t            if (self._ready === null) {\n\t                self._ready = self._initDriver();\n\t            }\n\t\n\t            return self._ready;\n\t        });\n\t\n\t        executeTwoCallbacks(promise, callback, callback);\n\t        return promise;\n\t    };\n\t\n\t    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n\t        var self = this;\n\t\n\t        if (!isArray(drivers)) {\n\t            drivers = [drivers];\n\t        }\n\t\n\t        var supportedDrivers = this._getSupportedDrivers(drivers);\n\t\n\t        function setDriverToConfig() {\n\t            self._config.driver = self.driver();\n\t        }\n\t\n\t        function initDriver(supportedDrivers) {\n\t            return function () {\n\t                var currentDriverIndex = 0;\n\t\n\t                function driverPromiseLoop() {\n\t                    while (currentDriverIndex < supportedDrivers.length) {\n\t                        var driverName = supportedDrivers[currentDriverIndex];\n\t                        currentDriverIndex++;\n\t\n\t                        self._dbInfo = null;\n\t                        self._ready = null;\n\t\n\t                        return self.getDriver(driverName).then(function (driver) {\n\t                            self._extend(driver);\n\t                            setDriverToConfig();\n\t\n\t                            self._ready = self._initStorage(self._config);\n\t                            return self._ready;\n\t                        })[\"catch\"](driverPromiseLoop);\n\t                    }\n\t\n\t                    setDriverToConfig();\n\t                    var error = new Error('No available storage method found.');\n\t                    self._driverSet = Promise$1.reject(error);\n\t                    return self._driverSet;\n\t                }\n\t\n\t                return driverPromiseLoop();\n\t            };\n\t        }\n\t\n\t        // There might be a driver initialization in progress\n\t        // so wait for it to finish in order to avoid a possible\n\t        // race condition to set _dbInfo\n\t        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n\t            return Promise$1.resolve();\n\t        }) : Promise$1.resolve();\n\t\n\t        this._driverSet = oldDriverSetDone.then(function () {\n\t            var driverName = supportedDrivers[0];\n\t            self._dbInfo = null;\n\t            self._ready = null;\n\t\n\t            return self.getDriver(driverName).then(function (driver) {\n\t                self._driver = driver._driver;\n\t                setDriverToConfig();\n\t                self._wrapLibraryMethodsWithReady();\n\t                self._initDriver = initDriver(supportedDrivers);\n\t            });\n\t        })[\"catch\"](function () {\n\t            setDriverToConfig();\n\t            var error = new Error('No available storage method found.');\n\t            self._driverSet = Promise$1.reject(error);\n\t            return self._driverSet;\n\t        });\n\t\n\t        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n\t        return this._driverSet;\n\t    };\n\t\n\t    LocalForage.prototype.supports = function supports(driverName) {\n\t        return !!driverSupport[driverName];\n\t    };\n\t\n\t    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n\t        extend(this, libraryMethodsAndProperties);\n\t    };\n\t\n\t    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n\t        var supportedDrivers = [];\n\t        for (var i = 0, len = drivers.length; i < len; i++) {\n\t            var driverName = drivers[i];\n\t            if (this.supports(driverName)) {\n\t                supportedDrivers.push(driverName);\n\t            }\n\t        }\n\t        return supportedDrivers;\n\t    };\n\t\n\t    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n\t        // Add a stub for each driver API method that delays the call to the\n\t        // corresponding driver method until localForage is ready. These stubs\n\t        // will be replaced by the driver methods as soon as the driver is\n\t        // loaded, so there is no performance impact.\n\t        for (var i = 0; i < LibraryMethods.length; i++) {\n\t            callWhenReady(this, LibraryMethods[i]);\n\t        }\n\t    };\n\t\n\t    LocalForage.prototype.createInstance = function createInstance(options) {\n\t        return new LocalForage(options);\n\t    };\n\t\n\t    return LocalForage;\n\t}();\n\t\n\t// The actual localForage object that we expose as a module or via a\n\t// global. It's extended by pulling in one of our other libraries.\n\t\n\t\n\tvar localforage_js = new LocalForage();\n\t\n\tmodule.exports = localforage_js;\n\t\n\t},{\"3\":3}]},{},[4])(4)\n\t});\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** app.c496ddec09bc10b3421c.js\n **/","import React from 'react';\nimport { render } from 'react-dom';\nimport { Router, browserHistory } from 'react-router';\nimport { Provider } from 'react-redux';\nimport { persistStore } from 'redux-persist';\nimport localForage from 'localforage';\n\nimport routes from '../common/routes';\n\nimport StyleProvider from '../common/StyleProvider';\n\nimport configureStore from '../common/configureStore';\n\nconst store = configureStore();\npersistStore(store, { storage: localForage });\n\nrender(\n  <StyleProvider userAgent={navigator.userAgent}>\n    <Provider store={store}>\n      <Router routes={routes} history={browserHistory} />\n    </Provider>\n  </StyleProvider>,\ndocument.getElementById('app'));\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/client/index.jsx\n **/","import React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n        <h1>Hoi</h1>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common/App.jsx\n **/","import React, { Component } from 'react';\nimport { StyleRoot, Style } from 'radium';\n\nimport globalStyles from './globalStyles';\n\nclass StyleProvider extends Component {\n  static displayName = 'EchteHeldenVanOranje'\n\n  render() {\n    const { children } = this.props;\n    return (\n      <StyleRoot radiumConfig={{ userAgent: this.props.userAgent }}>\n        <Style rules={globalStyles} />\n        {children}\n      </StyleRoot>\n    );\n  }\n}\n\nexport default StyleProvider;\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common/StyleProvider.jsx\n **/","import { createStore, compose } from 'redux';\nimport rootReducer from './reducers';\nimport { autoRehydrate } from 'redux-persist';\n\nexport default function configureStore() {\n  let store;\n\n  if(process.browser) {\n    const enhancers = compose(\n      autoRehydrate(),\n      window.devToolsExtension ? window.devToolsExtension() : f => f\n    );\n\n    store = createStore(\n      rootReducer,\n      undefined, // due to redux-persist\n      enhancers\n    );\n  } else {\n    store = createStore(rootReducer);\n  }\n\n  if(module.hot) {\n    module.accept('./reducers/index', () => {\n      const nextReducer = require('./reducers/index');\n      store.replaceReducer(nextReducer);\n    });\n  }\n\n  return store;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common/configureStore.js\n **/","export default {\n  'html' : {\n    msTextSizeAdjust: '100%',\n    webkitTextSizeAdjust: '100%',\n  },\n  'body' : {\n    margin: 0\n  },\n  'article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary': {\n    display: 'block'\n  },\n  'audio, canvas, progress, video': {\n    display: 'inline-block',\n    verticalAlign: 'baseline'\n  },\n  'audio:not([controls])': {\n    display: 'none',\n    height: 0\n  },\n  '[hidden], template': {\n    display: 'none'\n  },\n  'a' : {\n    backgroundColor: 'transparent'\n  },\n  'a:active, a:hover': {\n    outline: 0\n  },\n  'abbr[title]': {\n    borderBottom: '1px dotted'\n  },\n  'b, strong': {\n    fontWeight: 'bold'\n  },\n  'dfn' : {\n    fontStyle: 'italic'\n  },\n  'h1' : {\n    fontSize: '2em',\n    margin: '0.67em 0'\n  },\n  'mark' : {\n    background: '#ff0',\n    color: '#000'\n  },\n  'small' : {\n    fontSize: '80%'\n  },\n  'sub, sup': {\n    fontSize: '75%',\n    lineHeight: 0,\n    position: 'relative',\n    verticalAlign: 'baseline'\n  },\n  'sup' : {\n    top: '-0.5em'\n  },\n  'sub' : {\n    bottom: '-0.25em'\n  },\n  'img' : {\n    border: 0\n  },\n  'svg:not(:root)': {\n    overflow: 'hidden'\n  },\n  'figure' : {\n    margin: '1em 40px'\n  },\n  'hr' : {\n    boxSizing: 'content-box',\n    height: 0\n  },\n  'pre' : {\n    overflow: 'auto'\n  },\n  'code, kbd, pre, samp': {\n    fontFamily: 'monospace, monospace',\n    fontSize: '1em'\n  },\n  'button, input, optgroup, select, textarea': {\n    color: 'inherit',\n    font: 'inherit',\n    margin: 0\n  },\n  'button' : {\n    overflow: 'visible'\n  },\n  'button, select': {\n    textTransform: 'none'\n  },\n  'button, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"]': {\n    webkitAppearance: 'button',\n    cursor: 'pointer'\n  },\n  'button[disabled], html input[disabled]': {\n    cursor: 'default'\n  },\n  'button::-moz-focus-inner, input::-moz-focus-inner': {\n    border: 0,\n    padding: 0\n  },\n  'input' : {\n    lineHeight: 'normal'\n  },\n  'input[type=\"checkbox\"], input[type=\"radio\"]': {\n    boxSizing: 'border-box',\n    padding: 0\n  },\n  'input[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button': {\n    height: 'auto'\n  },\n  'input[type=\"search\"]': {\n    webkitAppearance: 'textfield',\n    boxSizing: 'content-box'\n  },\n  'input[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration': {\n    webkitAppearance: 'none'\n  },\n  'fieldset' : {\n    border: '1px solid #c0c0c0',\n    margin: '0 2px',\n    padding: '0.35em 0.625em 0.75em'\n  },\n  'legend' : {\n    border: 0,\n    padding: 0\n  },\n  'textarea' : {\n    overflow: 'auto'\n  },\n  'optgroup' : {\n    fontWeight: 'bold'\n  },\n  'table' : {\n    borderCollapse: 'collapse',\n    borderSpacing: 0\n  },\n  'td, th': {\n    padding: 0\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common/globalStyles.js\n **/","import { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({});\n\nexport default rootReducer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common/reducers/index.js\n **/","import React from 'react';\nimport { Route, IndexRoute } from 'react-router';\n\nimport App from './App';\n\nconst routes = (\n  <Route path=\"/\" component={App}>\n    <IndexRoute />\n  </Route>\n);\n\nexport default routes;\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common/routes.jsx\n **/","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.4.3\n    https://mozilla.github.io/localForage\n    (c) 2013-2016 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(2);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nexports.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nexports.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nexports.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nexports.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"2\":2}],2:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(1);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"1\":1}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {}\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here; just UA test for Safari (which, as of\n        // iOS 8/Yosemite, doesn't properly support IndexedDB).\n        // IndexedDB support is broken and different from Blink's.\n        // This is faster than the test case (and it's sync), so we just\n        // do this. *SIGH*\n        // http://bl.ocks.org/nolanlawson/raw/c83e9039edf2278047e9/\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        if (typeof openDatabase !== 'undefined' && typeof navigator !== 'undefined' && navigator.userAgent && /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent)) {\n            return false;\n        }\n\n        return idb && typeof idb.open === 'function' &&\n        // Some Samsung/HTC Android 4.0-4.3 devices\n        // have older IndexedDB specs; if this isn't available\n        // their IndexedDB is too old for us to use.\n        // (Replaces the onupgradeneeded test.)\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined' && typeof _dereq_ !== 'undefined') {\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs;\nvar dbContexts;\nvar toString = Object.prototype.toString;\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/9c25a23/src/adapters/idb/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(txn) {\n    return new Promise$1(function (resolve) {\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve) {\n        deferredOperation.resolve = resolve;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function () {\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + ' can\\'t be downgraded from version ' + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Initialize a singleton container for all running localForages.\n    if (!dbContexts) {\n        dbContexts = {};\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = {\n            // Running localForages sharing a database.\n            forages: [],\n            // Shared database.\n            db: null,\n            // Database readiness (promise).\n            dbReady: null,\n            // Deferred operations on the database.\n            deferredOperations: []\n        };\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.get(key);\n\n            req.onsuccess = function () {\n                var value = req.result;\n                if (value === undefined) {\n                    value = null;\n                }\n                if (_isEncodedBlob(value)) {\n                    value = _decodeBlob(value);\n                }\n                resolve(value);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var iterationNumber = 1;\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (cursor) {\n                    var value = cursor.value;\n                    if (_isEncodedBlob(value)) {\n                        value = _decodeBlob(value);\n                    }\n                    var result = iterator(value, cursor.key, iterationNumber++);\n\n                    if (result !== void 0) {\n                        resolve(result);\n                    } else {\n                        cursor[\"continue\"]();\n                    }\n                } else {\n                    resolve();\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // The reason we don't _save_ null is because IE 10 does\n            // not support saving the `null` type in IndexedDB. How\n            // ironic, given the bug below!\n            // See: https://github.com/mozilla/localForage/issues/161\n            if (value === null) {\n                value = undefined;\n            }\n\n            transaction.oncomplete = function () {\n                // Cast to undefined so the value passed to\n                // callback/promise is the same as what one would get out\n                // of `getItem()` later. This leads to some weirdness\n                // (setItem('foo', undefined) will return `null`), but\n                // it's not my fault localStorage is our baseline and that\n                // it's weird.\n                if (value === undefined) {\n                    value = null;\n                }\n\n                resolve(value);\n            };\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n\n            var req = store.put(value, key);\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n\n            // We use a Grunt task to make this safe for IE and some\n            // versions of Android (including those used by Cordova).\n            // Normally IE won't like `.delete()` and will insist on\n            // using `['delete']()`, but we have a build step that\n            // fixes this for us now.\n            var req = store[\"delete\"](key);\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onerror = function () {\n                reject(req.error);\n            };\n\n            // The request will be also be aborted if we've exceeded our storage\n            // space.\n            transaction.onabort = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var transaction = dbInfo.db.transaction(dbInfo.storeName, 'readwrite');\n            var store = transaction.objectStore(dbInfo.storeName);\n            var req = store.clear();\n\n            transaction.oncomplete = function () {\n                resolve();\n            };\n\n            transaction.onabort = transaction.onerror = function () {\n                var err = req.error ? req.error : req.transaction.error;\n                reject(err);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n            var req = store.count();\n\n            req.onsuccess = function () {\n                resolve(req.result);\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var advanced = false;\n            var req = store.openCursor();\n            req.onsuccess = function () {\n                var cursor = req.result;\n                if (!cursor) {\n                    // this means there weren't enough keys\n                    resolve(null);\n\n                    return;\n                }\n\n                if (n === 0) {\n                    // We have the first key, return it if that's what they\n                    // wanted.\n                    resolve(cursor.key);\n                } else {\n                    if (!advanced) {\n                        // Otherwise, ask the cursor to skip ahead n\n                        // records.\n                        advanced = true;\n                        cursor.advance(n);\n                    } else {\n                        // When we get here, we've got the nth key.\n                        resolve(cursor.key);\n                    }\n                }\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);\n\n            var req = store.openCursor();\n            var keys = [];\n\n            req.onsuccess = function () {\n                var cursor = req.result;\n\n                if (!cursor) {\n                    resolve(keys);\n                    return;\n                }\n\n                keys.push(cursor.key);\n                cursor[\"continue\"]();\n            };\n\n            req.onerror = function () {\n                reject(req.error);\n            };\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys\n};\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' (id INTEGER PRIMARY KEY, key unique, value)', [], function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        });\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        t.executeSql('INSERT OR REPLACE INTO ' + dbInfo.storeName + ' (key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // TODO: Try to re-run the transaction.\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                t.executeSql('SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n\n                    resolve(result);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                t.executeSql('SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1\n};\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = dbInfo.name + '/';\n\n    if (dbInfo.storeName !== self._defaultConfig.storeName) {\n        dbInfo.keyPrefix += dbInfo.storeName + '/';\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            if (localStorage.key(i).indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(localStorage.key(i).substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    // Default API, from Gaia/localStorage.\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2\n};\n\n// Custom drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar CustomDrivers = {};\n\nvar DriverType = {\n    INDEXEDDB: 'asyncStorage',\n    LOCALSTORAGE: 'localStorageWrapper',\n    WEBSQL: 'webSQLStorage'\n};\n\nvar DefaultDriverOrder = [DriverType.INDEXEDDB, DriverType.WEBSQL, DriverType.LOCALSTORAGE];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'];\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nvar driverSupport = {};\n// Check to see if IndexedDB is available and if it is the latest\n// implementation; it's our preferred backend library. We use \"_spec_test\"\n// as the name of the database because it's not the one we'll operate on,\n// but it's useful to make sure its using the right spec.\n// See: https://github.com/mozilla/localForage/issues/128\ndriverSupport[DriverType.INDEXEDDB] = isIndexedDBValid();\n\ndriverSupport[DriverType.WEBSQL] = isWebSQLValid();\n\ndriverSupport[DriverType.LOCALSTORAGE] = isLocalStorageValid();\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var key in arg) {\n                if (arg.hasOwnProperty(key)) {\n                    if (isArray(arg[key])) {\n                        arguments[0][key] = arg[key].slice();\n                    } else {\n                        arguments[0][key] = arg[key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nfunction isLibraryDriver(driverName) {\n    for (var driver in DriverType) {\n        if (DriverType.hasOwnProperty(driver) && DriverType[driver] === driverName) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        this.INDEXEDDB = DriverType.INDEXEDDB;\n        this.LOCALSTORAGE = DriverType.LOCALSTORAGE;\n        this.WEBSQL = DriverType.WEBSQL;\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver);\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n                var namingError = new Error('Custom driver name already in use: ' + driverObject._driver);\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n                if (isLibraryDriver(driverObject._driver)) {\n                    reject(namingError);\n                    return;\n                }\n\n                var customDriverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0; i < customDriverMethods.length; i++) {\n                    var customDriverMethod = customDriverMethods[i];\n                    if (!customDriverMethod || !driverObject[customDriverMethod] || typeof driverObject[customDriverMethod] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var supportPromise = Promise$1.resolve(true);\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        supportPromise = driverObject._support();\n                    } else {\n                        supportPromise = Promise$1.resolve(!!driverObject._support);\n                    }\n                }\n\n                supportPromise.then(function (supportResult) {\n                    driverSupport[driverName] = supportResult;\n                    CustomDrivers[driverName] = driverObject;\n                    resolve();\n                }, reject);\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var self = this;\n        var getDriverPromise = Promise$1.resolve().then(function () {\n            if (isLibraryDriver(driverName)) {\n                switch (driverName) {\n                    case self.INDEXEDDB:\n                        return asyncStorage;\n                    case self.LOCALSTORAGE:\n                        return localStorageWrapper;\n                    case self.WEBSQL:\n                        return webSQLStorage;\n                }\n            } else if (CustomDrivers[driverName]) {\n                return CustomDrivers[driverName];\n            } else {\n                throw new Error('Driver not found.');\n            }\n        });\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(function (driver) {\n                            self._extend(driver);\n                            setDriverToConfig();\n\n                            self._ready = self._initStorage(self._config);\n                            return self._ready;\n                        })[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!driverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0; i < LibraryMethods.length; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/localforage/dist/localforage.js\n ** module id = 277\n ** module chunks = 2\n **/"],"sourceRoot":""}